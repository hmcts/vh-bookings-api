name: $(Date:yyyyMMddhhmm)-$(Rev:r)

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: VIH-8979
      endpoint: hmcts

pr:
  - master

variables:
  - group: vh-github-app-credentials
  - name: app_path
    value: 'BookingsApi'
  - name: sonar_exclusion
    value: '**/${{ variables.app_path }}.Contract/**,**/Bookings.API/Program.cs, **/Bookings.API/Startup.cs, **/Bookings.API/Extensions/**, **/Bookings.API/Swagger/**, **/Bookings.API/ConfigureServicesExtensions.cs, **/Testing.Common/**, **/Bookings.Common/**, **/Bookings.DAL/Mappings/**, **/Bookings.DAL/SeedData/**, **/Bookings.DAL/BookingsDbContext.cs, **/Bookings.DAL/**/DesignTimeHearingsContextFactory.cs, Bookings.DAL/Migrations/**, **/Bookings.Domain/Ddd/**, **/Bookings.DAL/Commands/Core/**, **/Bookings.DAL/Queries/Core/**, **/Testing.Common/**, **/Bookings.DAL/Migrations/*, **/Bookings.DAL/Migrations/**, **/Migrations/*sonar.cpd.exclusions=**/Program.cs, **/Startup.cs, Bookings.DAL/Mappings/**, **/Bookings.DAL/Migrations/**, Bookings.DAL/Migrations/**, Bookings.DAL/Migrations/*, Bookings.DAL/Migrations/*.cs, Migrations/**, **/Migrations/*, **Migrations**, SeedData/**, DesignTimeHearingsContextFactory.cs, Ddd/**, Testing.Common/**, Bookings.API/ConfigureServicesExtensions.cs, Bookings.API/Extensions/**, Bookings.API/Swagger/**, Bookings.Common/**'


#####################################################
# CI Steps. ##########
stages:
  - stage: CI_Build
    displayName: CI Build
    jobs:
    - job: UnitTests
      displayName: "Unit Tests"
      steps:
        - checkout: self

        - template: stages\dotnet-tests\unit-tests.yml@azTemplates
          parameters:
            nugetConfigPath: ${{ variables.app_path }}
            nugetPackagePath: /home/vsts/.nuget/packages/
            unitTestProjectPath: "${{ variables.app_path }}/${{ variables.app_path }}.UnitTests"
            coverletCoverageExclusions:
              - "[${{ variables.app_path }}.*Tests?]*"
              - "[${{ variables.app_path }}]Startup"
              - "[*]${{ variables.app_path }}.Common.*"
              - "[Testing.Common]*"

            #sonarExclusion: |
            #  sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml
            #  sonar.coverage.exclusions=${{ variables.sonar_exclusion }}
#####################################################
# Pre Steps. #########################
  - stage: Dock
    displayName: Build and Push Docker Image
    variables: 
      - group: aks-cluster-info
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - group: vh-github-app-credentials
    jobs:
    - job: Dock
      displayName: "Build and Push image ${{ variables.git_repo_name }}"
      steps:
        - checkout: self

        - template: templates\Containerisation\docker\docker-compose.yaml@azTemplates
          parameters:
            azureSubscription: ${{ variables.acrSubscription }}
            acrName: ${{ variables.acrName }}
            repositoryName:  ${{ variables.repositoryName }}

        - template: templates\Containerisation\docker\docker-push-azure.yaml@azTemplates
          parameters:
            azureSubscription: ${{ variables.acrSubscription }}
            acrName: ${{ variables.acrName }}
            repositoryName:  ${{ variables.repositoryName }}
            imageName: "${{ replace(variables.git_repo_name, '-', '') }}"
            imageTags:
              - '${{ variables.prTagName }}'

    - job: Generate_EF
      displayName: "Generate Entity Framework Script"
      steps:
      - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
        parameters:
          outputPath: $(Build.StagingDirectory)
          contextName: ${{ variables.efContextName }}
          workingPath: $(System.DefaultWorkingDirectory)/BookingsApi/BookingsApi
          projectName: ${{ variables.efProjectName }}

      - task: PublishPipelineArtifact@1
        displayName: Publish EF Artifacts
        inputs:
          targetPath: $(Build.StagingDirectory)
          publishLocation: Pipeline
          artifact: ${{ variables.efContextName }}-$(Build.BuildId)

#####################################################
# Run Entity Framework Dev. #########################
  - stage: EF_Dev
    dependsOn: Dock
    displayName: Run EF Dev
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_Dev
        pool:
         vmImage: 'windows-latest'
        displayName: Run EF Dev
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.BookingsApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to Dev. ######################### 
  - stage: Install
    dependsOn: EF_Dev
    displayName: Deploy Helm chart to Dev AKS
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: ${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: aks_push
        displayName: Deploy to AKS
        steps:
          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
          - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
            parameters:
              privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              appId: $(gh_app_app_id)
              envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
              envValuesPath: ${{ variables.envValuesPath }}
              acrName: ${{ variables.acrName }}
              repositoryName: ${{ variables.repositoryName }}
              prTagName: ${{ variables.prTagName }}
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              dnsRecordName: ${{ variables.dnsRecordName }}
              dnsZone: ${{ variables.dnsZone }}
              env: ${{ variables.env }}
              chartName: ${{ variables.chartName }}
              chartPath: ${{ variables.chartPath }}
              subscriptionName: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
              dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
              dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"

#####################################################
# Manual Approval To QA. ############################
  - stage: Wait
    jobs:
      - job: Wait
        displayName: "Approve for release to QA"
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              instructions: 'Please approve the release of PR-$(System.PullRequest.PullRequestNumber) to the QA environment to resume'
              onTimeout: 'reject'

#####################################################
# Run Entity Framework QA. ##########################
  - stage: EF_QA
    dependsOn: Wait
    displayName: Run EF QA
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_QA
        pool:
         vmImage: 'windows-latest'
        displayName: Run EF QA
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.BookingsApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to QA. ##########################
  - stage: Install_Demo
    displayName: Deploy Helm chart to QA AKS
    dependsOn: EF_QA
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: ${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: aks_push
        displayName: Deploy to AKS
        steps:
        - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
          parameters:
            subscriptionName: "${{ variables.subscriptionName }}"
            environment: ${{ variables.env }}
        - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
          parameters:
            privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
            appId: $(gh_app_app_id)
            envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
            envValuesPath: ${{ variables.envValuesPath }}
            acrName: ${{ variables.acrName }}
            repositoryName: ${{ variables.repositoryName }}
            prTagName: ${{ variables.prTagName }}
            releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
            dnsRecordName: ${{ variables.dnsRecordName }}
            dnsZone: ${{ variables.dnsZone }}
            env: ${{ variables.env }}
            chartName: ${{ variables.chartName }}
            chartPath: ${{ variables.chartPath }}
            subscriptionName: "${{ variables.subscriptionName }}"
            aksResourceGroupName: "$(aksCluster.resourceGroup)"
            aksClusterName: "$(aksCluster.name)"
            dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
            dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"