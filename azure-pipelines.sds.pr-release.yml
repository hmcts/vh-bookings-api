name: $(Date:yyyyMMddhhmm)-$(Rev:r)

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: VIH-9084-nuget-pattern
      endpoint: hmcts
      
trigger: none

pr:
  - master

variables:
  - group: vh-github-app-credentials
  - name: app_path
    value: 'BookingsApi'

stages:
#####################################################
# CI Build Checks. ##################################
  - stage: CI_Build
    displayName: CI Build
    variables: 
      - template: variables/shared.yaml
        parameters:
          env: ''
    jobs:
      - job: CI_Helm
        displayName: "Helm CI"
        steps:
          - checkout: self

          - template: templates\Containerisation\helm\helm-lint.yaml@azTemplates
            parameters:
              chartPath: ${{ variables.chartPath }}
              chartValuesPath: ${{ variables.chartPath }}

      - job: UnitTests
        displayName: "Unit Tests"
        steps:
          - checkout: self
          
          - template: stages\dotnet-tests\unit-tests.yml@azTemplates
            parameters:
              nugetConfigPath: ${{ variables.app_path }}
              unitTestProjectPath: "${{ variables.app_path }}/${{ variables.app_path }}.UnitTests"
              coverletCoverageExclusions:
                - "[${{ variables.app_path }}.*Tests?]*"
                - "[${{ variables.app_path }}]Startup"
                - "[*]${{ variables.app_path }}.Common.*"
                - "[Testing.Common]*"

      - job: SonarCloud
        displayName: SonarCloud Test Analysis
        steps:
          - template: templates/sonarCloud/prepare.yml@azTemplates
            parameters:
              sonarCloud_ExtraProperties: |
                sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml
                sonar.coverage.exclusions=${{ variables.sonar_exclusion }}

          - bash: |
              cd BookingsApi/BookingsApi.UnitTests
              dotnet build BookingsApi.UnitTests.csproj
            displayName: Build .NET Project(s)

          - template: templates/sonarCloud/runAnalysis.yml@azTemplates
            

#####################################################
# Pre Steps. ########################################
# Build Docker Image & Generate EF Script. ##########
  - stage: Dock
    displayName: Build Bookings API
    variables: 
      - group: aks-cluster-info
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - group: vh-github-app-credentials
    jobs:
    #- job: Dock
      #displayName: "Build and Push Image ${{ variables.git_repo_name }}"
      #steps:
        #- checkout: self
#
        #- template: templates\Github\get-app-token.yaml@azTemplates
          #parameters:
            #privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
            #appId: $(gh_app_app_id)
#
        #- template: templates\Github\bump-chart-versions.yaml@azTemplates
          #parameters:
            #chartName: ${{ variables.chartName }}
            #chartPath: $(Build.SourcesDirectory)
            #chartBranch: $(Build.SourceBranch)
            #githubToken: $(githubappinstall.token)
            #githubUsername: $(gh_app_name)
            #githubEmail: "$(gh_app_app_id)+$(gh_app_name)[bot]@users.noreply.github.com"
#
        #- template: templates\Containerisation\docker\docker-compose.yaml@azTemplates
          #parameters:
            #azureSubscription: ${{ variables.acrSubscription }}
            #acrName: ${{ variables.acrName }}
            #repositoryName:  ${{ variables.repositoryName }}
#
        #- template: templates\Containerisation\docker\docker-push-azure.yaml@azTemplates
          #parameters:
            #azureSubscription: ${{ variables.acrSubscription }}
            #acrName: ${{ variables.acrName }}
            #repositoryName:  ${{ variables.repositoryName }}
            #imageName: "${{ replace(variables.git_repo_name, '-', '') }}"
            #imageTags:
              #- '${{ variables.prTagName }}'

    - job: Generate_Entity_Framework_Script
      displayName: "Generate Entity Framework Script"
      steps:
      - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
        parameters:
          outputPath: $(Build.StagingDirectory)
          contextName: ${{ variables.efContextName }}
          workingPath: $(System.DefaultWorkingDirectory)/BookingsApi/BookingsApi
          projectName: ${{ variables.efProjectName }}
    
#####################################################
# Run Entity Framework Dev. #########################
  #- stage: Run_Entity_Framework_Dev
    #dependsOn: Dock
    #displayName: Run Entity Framework Dev
    #variables:
      #- template: variables/dev.yaml
      #- template: variables/shared.yaml
        #parameters:
          #env: ${{ variables.env }}
    #jobs:
      #- job: Run_Entity_Framework_Dev
        #pool:
         #vmImage: 'windows-latest' # This Job Must be Run on Windows
        #displayName: Run Entity Framework Dev
        #steps:
          #- download: current
            #displayName: Download Sql Artifact
#
          #- template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            #parameters:
              #sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              #sqlServerName: ${{ variables.vhSQLServerName }}
              #databaseName: ${{ variables.BookingsApiDbName }}
              #azureSubscription: ${{ variables.subscriptionName }}
              #sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              #kvfirewallRequired: false
              #kvName: ${{ variables.vhKeyVault }}
              #kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              #kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to Dev. ######################### 
  # - stage: Install
    # dependsOn: Run_Entity_Framework_Dev
    # displayName: Deploy Helm Chart Dev AKS
    # variables:
      # - template: variables/dev.yaml
      # - template: variables/shared.yaml
        # parameters:
          # env: ${{ variables.env }}
      # - name: dnsRecordName
        # value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    # jobs:
      # - job: helm_uninstall
        # displayName: Uninstall Helm from Dev
        # steps:
          # - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            # parameters:
              # subscriptionName: "${{ variables.subscriptionName }}"
              # environment: ${{ variables.env }}
#               
          # - template: templates/Containerisation/helm/helm-uninstall.yaml@azTemplates
            # parameters:
              # namespace: 'vh'
              # releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              # azureSubscription: "${{ variables.subscriptionName }}"
              # aksResourceGroupName: "$(aksCluster.resourceGroup)"
              # aksClusterName: "$(aksCluster.name)"
      # - job: aks_push
        # displayName: Deploy To Dev AKS
        # steps:
          # - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            # parameters:
              # subscriptionName: "${{ variables.subscriptionName }}"
              # environment: ${{ variables.env }}
          # - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
            # parameters:
              # privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              # appId: $(gh_app_app_id)
              # envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
              # envValuesPath: ${{ variables.envValuesPath }}
              # acrName: ${{ variables.acrName }}
              # repositoryName: ${{ variables.repositoryName }}
              # prTagName: ${{ variables.prTagName }}
              # releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              # dnsRecordName: ${{ variables.dnsRecordName }}
              # dnsZone: ${{ variables.dnsZone }}
              # env: ${{ variables.env }}
              # chartName: ${{ variables.chartName }}
              # chartPath: ${{ variables.chartPath }}
              # subscriptionName: "${{ variables.subscriptionName }}"
              # aksResourceGroupName: "$(aksCluster.resourceGroup)"
              # aksClusterName: "$(aksCluster.name)"
              # dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
              # dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"

#####################################################
# Deploy Nuget Packages. #########################
  - stage: Push_Nuget
    #dependsOn: Install
    dependsOn: Dock
    displayName: Deploy Nuget Packages
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs: 
      - job: Publish_Nuget
        displayName: Publish NuGet Packages
        steps:
        - template: templates\dotnet\publish-nuget-packages.yml@azTemplates
          parameters:
            nugetProjectPath: ${{ variables.nuget_package_name }}
            vstsFeed: ${{ variables.nuget_feed_name }}
            gitVersionConfigPath: ${{ variables.git_version_config_path }}

#####################################################
# Manual Approval To Demo. ##########################
  - stage: Wait
    jobs:
      - job: Wait
        displayName: "Approve Release Demo"
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              instructions: 'Please approve the release of PR-$(System.PullRequest.PullRequestNumber) to the Demo environment to resume'
              onTimeout: 'reject'

#####################################################
# Run Entity Framework Demo. ########################
  - stage: Run_Entity_Framework_Demo
    dependsOn: Wait
    displayName: Run Entity Framework Demo
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_Demo
        pool:
         vmImage: 'windows-latest'
        displayName: Run Entity Framework Demo
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.BookingsApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to QA. ##########################
  - stage: Install_Demo
    displayName: Deploy Helm Chart Demo AKS
    dependsOn: Run_Entity_Framework_Demo
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: helm_uninstall
        displayName: Uninstall Helm from Dev
        steps:
          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
              
          - template: templates/Containerisation/helm/helm-uninstall.yaml@azTemplates
            parameters:
              namespace: 'vh'
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              azureSubscription: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
      - job: aks_push
        displayName: Deploy To Demo AKS
        steps:
        - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
          parameters:
            subscriptionName: "${{ variables.subscriptionName }}"
            environment: ${{ variables.env }}
        - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
          parameters:
            privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
            appId: $(gh_app_app_id)
            envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
            envValuesPath: ${{ variables.envValuesPath }}
            acrName: ${{ variables.acrName }}
            repositoryName: ${{ variables.repositoryName }}
            prTagName: ${{ variables.prTagName }}
            releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
            dnsRecordName: ${{ variables.dnsRecordName }}
            dnsZone: ${{ variables.dnsZone }}
            env: ${{ variables.env }}
            chartName: ${{ variables.chartName }}
            chartPath: ${{ variables.chartPath }}
            subscriptionName: "${{ variables.subscriptionName }}"
            aksResourceGroupName: "$(aksCluster.resourceGroup)"
            aksClusterName: "$(aksCluster.name)"
            dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
            dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"