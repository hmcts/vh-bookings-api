// <auto-generated />
using System;
using BookingsApi.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingsApi.DAL.Migrations
{
    [DbContext(typeof(BookingsDbContext))]
    [Migration("20230623135022_AddEpimsCodeToHearingVenue")]
    partial class AddEpimsCodeToHearingVenue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookingsApi.Domain.Allocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EffortSpent")
                        .HasColumnType("int");

                    b.Property<Guid>("HearingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JusticeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HearingId");

                    b.HasIndex("JusticeUserId");

                    b.ToTable("Allocation", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLeadCase")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Case", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Day")
                        .IsUnique()
                        .HasFilter("[Day] IS NOT NULL");

                    b.ToTable("DayOfWeek", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefenceAdvocateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HearingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sip")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DefenceAdvocateId");

                    b.HasIndex("HearingId");

                    b.HasIndex("Sip")
                        .IsUnique()
                        .HasFilter("[Sip] IS NOT NULL");

                    b.ToTable("Endpoint", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Hearing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AudioRecordingRequired")
                        .HasColumnType("bit");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HearingMediumType")
                        .HasColumnType("int")
                        .HasColumnName("HearingMediumId");

                    b.Property<string>("HearingRoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HearingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("HearingVenueName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("QuestionnaireNotRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduledDuration")
                        .HasColumnType("int");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("HearingStatusId");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("HearingTypeId");

                    b.HasIndex("HearingVenueName");

                    b.ToTable("Hearing", (string)null);

                    b.HasDiscriminator<int>("HearingMediumType");
                });

            modelBuilder.Entity("BookingsApi.Domain.HearingCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HearingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HearingId");

                    b.HasIndex("CaseId", "HearingId")
                        .IsUnique();

                    b.ToTable("HearingCase", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.HearingVenue", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EpimsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.HasIndex("EpimsCode");

                    b.ToTable("HearingVenue", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.JobHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobHistory", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.JudiciaryPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalRefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasLeft")
                        .HasColumnType("bit");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Leaver")
                        .HasColumnType("bit");

                    b.Property<string>("LeftOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNominals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalRefId")
                        .IsUnique()
                        .HasFilter("[ExternalRefId] IS NOT NULL");

                    b.ToTable("JudiciaryPerson", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.JudiciaryPersonStaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Leaver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNominals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JudiciaryPersonsStaging");
                });

            modelBuilder.Entity("BookingsApi.Domain.Jurisdiction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jurisdiction");
                });

            modelBuilder.Entity("BookingsApi.Domain.JusticeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("JusticeUser", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.JusticeUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("JusticeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JusticeUserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("JusticeUserRoles");
                });

            modelBuilder.Entity("BookingsApi.Domain.LinkedParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinkedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkedId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("LinkedParticipant", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Organisation", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseRoleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HearingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HearingRoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseRoleId");

                    b.HasIndex("HearingId");

                    b.HasIndex("HearingRoleId");

                    b.HasIndex("PersonId", "HearingId")
                        .IsUnique();

                    b.ToTable("Participant", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Participant");
                });

            modelBuilder.Entity("BookingsApi.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail")
                        .IsUnique()
                        .HasFilter("[ContactEmail] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Questionnaire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.ToTable("Questionnaire", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("CaseRole", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JurisdictionId")
                        .HasColumnType("int");

                    b.Property<bool>("Live")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JurisdictionId");

                    b.ToTable("CaseType", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.HearingRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Live")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("HearingRole", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.HearingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Live")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelshName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("HearingType", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.SuitabilityAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtendedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionnaireId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("SuitabilityAnswer", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.VhoNonAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JusticeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JusticeUserId");

                    b.ToTable("VhoNonAvailability", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.VhoWorkHours", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("JusticeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeekId");

                    b.HasIndex("JusticeUserId");

                    b.ToTable("VhoWorkHours", (string)null);
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Individual", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Participants.Participant");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Judge", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Participants.Participant");

                    b.HasDiscriminator().HasValue("Judge");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.JudicialOfficeHolder", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Participants.Participant");

                    b.HasDiscriminator().HasValue("JudicialOfficeHolder");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Representative", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Participants.Participant");

                    b.Property<string>("Representee")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Representative");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.StaffMember", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Participants.Participant");

                    b.HasDiscriminator().HasValue("StaffMember");
                });

            modelBuilder.Entity("BookingsApi.Domain.VideoHearing", b =>
                {
                    b.HasBaseType("BookingsApi.Domain.Hearing");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BookingsApi.Domain.Allocation", b =>
                {
                    b.HasOne("BookingsApi.Domain.Hearing", "Hearing")
                        .WithMany("Allocations")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.JusticeUser", "JusticeUser")
                        .WithMany("Allocations")
                        .HasForeignKey("JusticeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hearing");

                    b.Navigation("JusticeUser");
                });

            modelBuilder.Entity("BookingsApi.Domain.Endpoint", b =>
                {
                    b.HasOne("BookingsApi.Domain.Participants.Participant", "DefenceAdvocate")
                        .WithMany()
                        .HasForeignKey("DefenceAdvocateId");

                    b.HasOne("BookingsApi.Domain.Hearing", "Hearing")
                        .WithMany("Endpoints")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefenceAdvocate");

                    b.Navigation("Hearing");
                });

            modelBuilder.Entity("BookingsApi.Domain.Hearing", b =>
                {
                    b.HasOne("BookingsApi.Domain.RefData.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.RefData.HearingType", "HearingType")
                        .WithMany()
                        .HasForeignKey("HearingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.HearingVenue", "HearingVenue")
                        .WithMany()
                        .HasForeignKey("HearingVenueName");

                    b.Navigation("CaseType");

                    b.Navigation("HearingType");

                    b.Navigation("HearingVenue");
                });

            modelBuilder.Entity("BookingsApi.Domain.HearingCase", b =>
                {
                    b.HasOne("BookingsApi.Domain.Case", "Case")
                        .WithMany("HearingCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.Hearing", "Hearing")
                        .WithMany("HearingCases")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Hearing");
                });

            modelBuilder.Entity("BookingsApi.Domain.JusticeUserRole", b =>
                {
                    b.HasOne("BookingsApi.Domain.JusticeUser", "JusticeUser")
                        .WithMany("JusticeUserRoles")
                        .HasForeignKey("JusticeUserId");

                    b.HasOne("BookingsApi.Domain.RefData.UserRole", "UserRole")
                        .WithMany("JusticeUserRoles")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("JusticeUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BookingsApi.Domain.LinkedParticipant", b =>
                {
                    b.HasOne("BookingsApi.Domain.Participants.Participant", "Linked")
                        .WithMany()
                        .HasForeignKey("LinkedId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.Participants.Participant", "Participant")
                        .WithMany("LinkedParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Linked");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Participant", b =>
                {
                    b.HasOne("BookingsApi.Domain.RefData.CaseRole", "CaseRole")
                        .WithMany()
                        .HasForeignKey("CaseRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.Hearing", "Hearing")
                        .WithMany("Participants")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.RefData.HearingRole", "HearingRole")
                        .WithMany()
                        .HasForeignKey("HearingRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseRole");

                    b.Navigation("Hearing");

                    b.Navigation("HearingRole");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BookingsApi.Domain.Person", b =>
                {
                    b.HasOne("BookingsApi.Domain.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("BookingsApi.Domain.Questionnaire", b =>
                {
                    b.HasOne("BookingsApi.Domain.Participants.Participant", "Participant")
                        .WithOne("Questionnaire")
                        .HasForeignKey("BookingsApi.Domain.Questionnaire", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseRole", b =>
                {
                    b.HasOne("BookingsApi.Domain.RefData.CaseType", null)
                        .WithMany("CaseRoles")
                        .HasForeignKey("CaseTypeId");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseType", b =>
                {
                    b.HasOne("BookingsApi.Domain.Jurisdiction", null)
                        .WithMany("CaseTypes")
                        .HasForeignKey("JurisdictionId");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.HearingRole", b =>
                {
                    b.HasOne("BookingsApi.Domain.RefData.CaseRole", null)
                        .WithMany("HearingRoles")
                        .HasForeignKey("CaseRoleId");

                    b.HasOne("BookingsApi.Domain.RefData.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.HearingType", b =>
                {
                    b.HasOne("BookingsApi.Domain.RefData.CaseType", null)
                        .WithMany("HearingTypes")
                        .HasForeignKey("CaseTypeId");
                });

            modelBuilder.Entity("BookingsApi.Domain.SuitabilityAnswer", b =>
                {
                    b.HasOne("BookingsApi.Domain.Questionnaire", "Questionnaire")
                        .WithMany("SuitabilityAnswers")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("BookingsApi.Domain.VhoNonAvailability", b =>
                {
                    b.HasOne("BookingsApi.Domain.JusticeUser", "JusticeUser")
                        .WithMany("VhoNonAvailability")
                        .HasForeignKey("JusticeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JusticeUser");
                });

            modelBuilder.Entity("BookingsApi.Domain.VhoWorkHours", b =>
                {
                    b.HasOne("BookingsApi.Domain.DayOfWeek", "DayOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingsApi.Domain.JusticeUser", "JusticeUser")
                        .WithMany("VhoWorkHours")
                        .HasForeignKey("JusticeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOfWeek");

                    b.Navigation("JusticeUser");
                });

            modelBuilder.Entity("BookingsApi.Domain.Case", b =>
                {
                    b.Navigation("HearingCases");
                });

            modelBuilder.Entity("BookingsApi.Domain.Hearing", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Endpoints");

                    b.Navigation("HearingCases");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("BookingsApi.Domain.Jurisdiction", b =>
                {
                    b.Navigation("CaseTypes");
                });

            modelBuilder.Entity("BookingsApi.Domain.JusticeUser", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("JusticeUserRoles");

                    b.Navigation("VhoNonAvailability");

                    b.Navigation("VhoWorkHours");
                });

            modelBuilder.Entity("BookingsApi.Domain.Participants.Participant", b =>
                {
                    b.Navigation("LinkedParticipants");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("BookingsApi.Domain.Questionnaire", b =>
                {
                    b.Navigation("SuitabilityAnswers");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseRole", b =>
                {
                    b.Navigation("HearingRoles");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.CaseType", b =>
                {
                    b.Navigation("CaseRoles");

                    b.Navigation("HearingTypes");
                });

            modelBuilder.Entity("BookingsApi.Domain.RefData.UserRole", b =>
                {
                    b.Navigation("JusticeUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
